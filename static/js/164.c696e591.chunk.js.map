{"version":3,"file":"static/js/164.c696e591.chunk.js","mappings":"oMAsBA,EAjBc,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACb,OACI,iBAAKC,UAAU,kBAAf,WACI,gBAAKA,UAAU,OAAf,UACI,SAAC,MAAD,CAAuBA,UAAU,mBAErC,iBAAKA,UAAU,cAAf,WACI,eAAGA,UAAU,gCAAb,mBAAoDD,EAAME,eAC1D,eAAGD,UAAU,yBAAb,UAAuCD,EAAMG,SAAQ,kBAArD,gCAEJ,SAAC,KAAD,CAAMC,GAAG,IAAT,UACI,SAACC,EAAA,EAAD,CAAQJ,UAAU,WAAWK,OAAO,EAApC,4B,qDChBT,IAAMC,EAAY,wC,oJC6CzB,EArCkB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASb,EAA5B,EAA4BA,MACtBc,GAAOC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,QAcxC,OAZAG,EAAAA,EAAAA,YAAU,WACFH,EAAKI,YACLN,EAAU,CACNO,IAAI,GAAD,OAAKZ,EAAAA,EAAL,gBACHa,QAAS,CAAE,cAAiB,UAAYN,EAAKO,KAAKC,eACnD,SAACC,GACAb,EAAWa,QAIpB,CAACT,EAAMF,KAGN,6BACI,gBAAKX,UAAU,iDAAf,UACI,sEAEHY,IAAW,SAACW,EAAA,EAAD,IACXxB,IAAUa,IAAW,SAACY,EAAA,EAAD,CAAOzB,MAAOA,KACpC,gBAAKC,UAAU,2BAAf,SACKQ,EAAQiB,KAAI,SAACC,EAAMC,GAAP,OACT,iBAAiB3B,UAAU,iBAA3B,WACI,wBAAK0B,EAAKE,eACV,cAAG5B,UAAU,YAAb,SAA0B0B,EAAKG,QAC/B,cAAG7B,UAAU,YAAb,SAA0B0B,EAAKI,kBAHzBH,a,mFCG9B,IAnCmB,WACf,OAA8BpB,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBmB,EAAhB,KACA,GAA0BxB,EAAAA,EAAAA,UAAS,MAAnC,eAAOR,EAAP,KAAciC,EAAd,KAEMrB,GAAYsB,EAAAA,EAAAA,aAAW,mCAAE,WAAOC,EAAQC,GAAf,gFAC3BJ,GAAW,GACXC,EAAS,MAFkB,kBAIAI,MAAMF,EAAOhB,IAAK,CACrCmB,OAAQH,EAAOG,OAASH,EAAOG,OAAS,MACxClB,QAASe,EAAOf,QAAUe,EAAOf,QAAU,GAC3CmB,KAAMC,KAAKC,UAAUN,EAAOI,QAPT,cAIjBhB,EAJiB,gBASJA,EAASmB,OATL,UASjBC,EATiB,OAWlBpB,EAASqB,GAXS,uBAYnBX,GAAS,kBACFU,GADC,IAEJzC,WAAYqB,EAASsB,UAEnB,IAAIpB,MAAM,mBAhBG,QAkBvBW,EAAcO,GAlBS,kDAoBvBV,GAAS,SAAAa,GAAC,OAAIA,GAAK,CACf3C,QAAS,+DACTD,WAAY,QAtBO,QAyB3B8B,GAAW,GAzBgB,0DAAF,wDA0B1B,IAEH,MAAO,CAAEnB,QAAAA,EAASoB,SAAAA,EAAUjC,MAAAA,EAAOY,UAAAA","sources":["Components/Error/index.js","Constants/serverUrl.js","Pages/Addresses/index.js","hooks/useRequest.js"],"sourcesContent":["import { FaExclamationTriangle } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../Button\";\r\nimport './error.css';\r\n\r\nconst Error = ({ error }) => {\r\n    return (  \r\n        <div className='error-container'>\r\n            <div className=\"icon\">\r\n                <FaExclamationTriangle className=\"w-100 h-100\"/>\r\n            </div>\r\n            <div className=\"center-text\">\r\n                <p className=\"error-code bold-text m-top-20\">Error {error.statusCode}</p>\r\n                <p className=\"error-message m-top-10\">{error.message}<br />Please try again later</p>\r\n            </div>\r\n            <Link to='/'>\r\n                <Button className=\"m-top-20\" light={true}>Dismiss</Button>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Error;","export const serverUrl = 'https://maufruits.up.railway.app/api'; // Moving from heroku to railway","import { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Error from '../../Components/Error';\r\nimport Loader from '../../Components/Loader';\r\nimport useRequest from '../../hooks/useRequest';\r\nimport './address.css';\r\nimport { serverUrl } from '../../Constants/serverUrl';\r\n\r\nconst Addresses = () => {\r\n    const [address, setAddress] = useState([]);\r\n    const { fetchData, loading, error } = useRequest();\r\n    const user = useSelector(state => state.user);\r\n    \r\n    useEffect(() => {\r\n        if (user.registered) {\r\n            fetchData({ \r\n                url: `${serverUrl}/userAddress`,\r\n                headers: { 'Authorization': 'Bearer ' + user.auth.accessToken }\r\n            }, (response) => {\r\n                setAddress(response);\r\n            })\r\n        };\r\n        \r\n    }, [user, fetchData]);\r\n\r\n    return ( \r\n        <main>\r\n            <div className='address-page-header flex spaceBetween center-v'>\r\n                <h2>Addresses associated with your account:</h2>\r\n            </div>\r\n            {loading && <Loader />}\r\n            {error && !loading && <Error error={error} />}\r\n            <div className='flex wrap gap20 m-top-20'>\r\n                {address.map((addr, index) => (\r\n                    <div key={index} className=\"addr-container\">\r\n                        <h3>{addr.addressLine}</h3>\r\n                        <p className='bold-text'>{addr.city}</p>\r\n                        <p className='bold-text'>{addr.contactNumber}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n \r\nexport default Addresses;","import { useCallback, useState } from 'react';\r\n\r\nconst useRequest = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchData = useCallback( async (config, dataFormatter) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch(config.url, {\r\n                method: config.method ? config.method : 'GET',\r\n                headers: config.headers ? config.headers : {},\r\n                body: JSON.stringify(config.body)\r\n            });\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setError({ \r\n                    ...data, \r\n                    statusCode: response.status\r\n                });\r\n                throw new Error('Request failed!');\r\n            }\r\n            dataFormatter(data);\r\n        } catch(err) {\r\n            setError(s => s || { \r\n                message: 'Something went wrong with our server. Please try again later', \r\n                statusCode: 500 \r\n            });\r\n        }\r\n        setLoading(false);\r\n    }, [] );\r\n\r\n    return { loading, setError, error, fetchData };\r\n}\r\n \r\nexport default useRequest;"],"names":["error","className","statusCode","message","to","Button","light","serverUrl","useState","address","setAddress","useRequest","fetchData","loading","user","useSelector","state","useEffect","registered","url","headers","auth","accessToken","response","Loader","Error","map","addr","index","addressLine","city","contactNumber","setLoading","setError","useCallback","config","dataFormatter","fetch","method","body","JSON","stringify","json","data","ok","status","s"],"sourceRoot":""}